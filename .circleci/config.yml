version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/openjdk:stretch
#  machine-executor:
#    docker:
#      - image: ruby

commands: # a named collection of steps that can be reused in different jobs
  restore_cache_cmd:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-
  save_cache_cmd:
    steps:
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

jobs:
  test:
    docker:
      - image: circleci/openjdk:stretch
    steps:
      - checkout
      - restore_cache_cmd
      - run: ./mvnw test
      - save_cache_cmd

  build:
    executor: docker-executor
    steps:
      - checkout
      - restore_cache_cmd
      - run: ./mvnw -Dmaven.test.skip=true package
      - save_cache_cmd

#workflows:
#  version: 2
#
#  test-then-build:
#    jobs:
#      - test
#      - build:
#          requires:
#            - test


# BUILD LINK: https://circleci.com/gh/annapamma/spring-petclinic/96#config/containers/0
# Where is the build directory? Is that what a .jar file is?
# Also, does it make sense to test then build? Usually for JavaScript I would test and then build,
# but it seems like for a compiled language the opposite is meant to happen.
